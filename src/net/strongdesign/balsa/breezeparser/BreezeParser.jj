/** * Copyright 2012 Stanislavs Golubcovs * * This file is part of DesiJ. *  * DesiJ is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * DesiJ is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with DesiJ.  If not, see <http://www.gnu.org/licenses/>. */options{	CHOICE_AMBIGUITY_CHECK = 2;	OTHER_AMBIGUITY_CHECK = 1;	STATIC = false;	DEBUG_PARSER = false;	DEBUG_LOOKAHEAD = false;	DEBUG_TOKEN_MANAGER = false;	ERROR_REPORTING = true;	JAVA_UNICODE_ESCAPE = false;	UNICODE_INPUT = false;	IGNORE_CASE = false;	USER_TOKEN_MANAGER = false;	USER_CHAR_STREAM = false;	BUILD_PARSER = true;	BUILD_TOKEN_MANAGER = true;	SANITY_CHECK = true;	FORCE_LA_CHECK = true;		JDK_VERSION = "1.5";}PARSER_BEGIN(BreezeParser)package net.strongdesign.balsa.breezeparser;
import java.io.FileInputStream;import java.io.FileNotFoundException;import java.util.LinkedList;import net.strongdesign.balsa.*;import net.strongdesign.balsa.breezefile.*;import net.strongdesign.balsa.HSChannel.ChannelSense;
public class BreezeParser {		private void throwParseException(String mes) throws ParseException {		throw new ParseException(mes+" in line " + token.beginLine + ", column " + token.beginColumn);	}		private void throwParseException(String mes, Token t) throws ParseException {		throw new ParseException(mes+" in line " + t.beginLine + ", column " + t.beginColumn);	}		public static void outputNet(Object value) {		System.out.printf("\n");		for (Object item: (LinkedList<Object>)value) {			AbstractBreezeElement be = BreezeElementFactory.baseElement(item);			be.output();			System.out.printf("\n");		}	}		Object intOrLong(long num) {				if (num>2147483647||num<-2147483648) 			return (Object)num;		else {			int tmp2=(int)num; 			return (Object)tmp2;		}	}		public static void main(String args[]) throws ParseException {				                try {					System.setIn(new FileInputStream(args[0]));				} catch (FileNotFoundException e) {					e.printStackTrace();					return;				}				BreezeParser parser = new BreezeParser(System.in);						outputNet(parser.ParseBreezeNet());				//output(parser.VALUE());	}}PARSER_END(BreezeParser)SKIP : { <SPACE: " " | "\r" | "\t" | "\n" >}SPECIAL_TOKEN:{	<SINGLE_LINE_COMMENT : ";" (~["\n", "\r"])* ("\n"|"\r"|"\r\n")? >}TOKEN : { <LP		: "(" > }TOKEN : { <RP		: ")" > }TOKEN : { <#LC_LETTER		: ["a"-"z"] > }TOKEN : { <#LETTER			: ["a"-"z"]|["A"-"Z"] > }TOKEN : { <#DEC_DIGIT		: (["0"-"9"]) > }TOKEN : { <DIGITS			: ["1"-"9"] (<DEC_DIGIT>)* > }TOKEN : { <STRING_LITERAL	: "\"" (~["\n", "\r", "\""])* "\"" > }TOKEN : { <SYMBOL			: < LC_LETTER > (< LC_LETTER >|< DEC_DIGIT >|"-"|"_"|":")* > }//TOKEN : { <IDENTIFIER		: "\"" ("$")? (<LETTER>|"_") (<LETTER>|<DEC_DIGIT>|"_"|".")* "\"" > }//TOKEN : { <IDENTIFIER		: <STRING_LITERAL> > }Object ParseBreezeNet() :{		LinkedList<Object> ll = new LinkedList<Object>();	Object cur;}{	(		cur=VALUE() { ll.add(cur); }	)+		{		return ll;	}}Object VALUE():{	Token sym=null;	Object ret=null;	long value;	LinkedList<Object> ll = new LinkedList<Object>();}{	(		value=INTEGER() {return intOrLong(value);}	|	ret=BOOLEAN() {return ret;}	|	sym=<STRING_LITERAL> { return sym.image;}	|	sym=<SYMBOL> {return sym.image;}	|	( "("(ret=VALUE() {ll.add(ret);} )* ")"  {return ll;} )	)}long POSITIVE():{	Token res=null;}{	(res=<DIGITS>)	{		return Long.valueOf(res.image); 	}}long NATURAL():{	long res=0;}{	(res=POSITIVE() | "0" {res=0;})		{		return res;	}}long INTEGER():{	long res=0;}{	(res=NATURAL() | ("-" res=POSITIVE() {res=-res;}) )	{		return res;	} }Object PARAMETER():{	Token tok=null;	long tmp=0;}{	( tmp=INTEGER() {return intOrLong(tmp);} | tok=<STRING_LITERAL> {return tok.image;} )}boolean BOOLEAN():{	Token tt=null;}{	( tt="#t" | tt="#f"	)		{		if (tt.image.equals("#t")) return true;		else return false;			}}