/* Generated By:JavaCC: Do not edit this line. HCExpressionParser.java */
package net.strongdesign.balsa.hcexpressionparser;


import net.strongdesign.balsa.hcexpressionparser.terms.*;
import net.strongdesign.balsa.hcexpressionparser.terms.HCTerm.ExpansionType;
import java.util.HashSet;

public class HCExpressionParser implements HCChannelSenseController, HCExpressionParserConstants {

        public int scale = 1;

        private HashSet<String> scaled = new HashSet<String>();
    private HashSet<String> acts = new HashSet<String>();

    public boolean isActive(String name) {
        return acts.contains(name);
    }

    public void setActive(String name, boolean act) {

        if (act) {
                acts.add(name);
        } else {
                acts.remove(name);
        }
    }

    public boolean isScaled(String name) {
        return scaled.contains(name);
    }

    public void setScaled(String name, boolean act) {

        if (act) {
                scaled.add(name);
        } else {
                scaled.remove(name);
        }
    }

  public static void main(String args []) throws ParseException
  {

    HCExpressionParser parser = new HCExpressionParser(System.in);


    while (true)
    {
      System.out.println("Reading from standard input...");
      try
      {
                        HCTerm t = parser.HCParser();

                        if (t!=null) System.out.println(t.toString());
            if (t==null) {
                System.out.println("NULL term returned");
            } else {
                        HCTerm up   = t.expand(ExpansionType.UP, parser.scale, parser, false);
                        HCTerm down = t.expand(ExpansionType.DOWN, parser.scale, parser, false);

                        if (up!=null) System.out.println("UP: "+up.toString());
                        else System.out.println("UP: null");
                        if (down!=null) System.out.println("DOWN: "+down.toString());
                        else System.out.println("DOWN: null");

                }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        e.printStackTrace();

        parser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        e.printStackTrace();
        break;
      }
    }

  }

  final public HCTerm HCParser() throws ParseException {
        HCTerm t=null;
        Token c;
        String chan;
        Token tk;
        scaled.clear();
    label_1:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_1;
      }
      if (jj_2_5(3)) {
        jj_consume_token(20);
      } else if (jj_2_6(3)) {
        jj_consume_token(21);
        c = jj_consume_token(CHANNEL);
                                                        setActive(c.image, true);
        label_2:
        while (true) {
          if (jj_2_2(3)) {
            ;
          } else {
            break label_2;
          }
          jj_consume_token(COMMA);
          c = jj_consume_token(CHANNEL);
                                                                    setActive(c.image, true);
        }
      } else if (jj_2_7(3)) {
        jj_consume_token(22);
        c = jj_consume_token(CHANNEL);
                                                        setActive(c.image, false);
        label_3:
        while (true) {
          if (jj_2_3(3)) {
            ;
          } else {
            break label_3;
          }
          jj_consume_token(COMMA);
          c = jj_consume_token(CHANNEL);
                                                                    setActive(c.image, false);
        }
      } else if (jj_2_8(3)) {
        jj_consume_token(23);
        c = jj_consume_token(CHANNEL);
                                                        scale = Integer.valueOf(c.image);
      } else if (jj_2_9(3)) {
        jj_consume_token(24);
        c = jj_consume_token(CHANNEL);
                                                        setScaled(c.image, true);
        label_4:
        while (true) {
          if (jj_2_4(3)) {
            ;
          } else {
            break label_4;
          }
          jj_consume_token(COMMA);
          c = jj_consume_token(CHANNEL);
                                                                    setScaled(c.image, true);
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t = hcChoice();
    if (jj_2_10(3)) {
      jj_consume_token(20);
    } else {
      ;
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public HCTerm hcChoice() throws ParseException {
        HCInfixOperator io = new HCInfixOperator();
        io.operation = HCInfixOperator.Operation.CHOICE;
        HCTerm t;
    t = hcConcur();
                              io.components.add(t);
    label_5:
    while (true) {
      if (jj_2_11(3)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(CHOICE);
      t = hcConcur();
                                                                             io.components.add(t);
    }
                if (io.components.size()==1) {if (true) return t;}
                {if (true) return io;}
    throw new Error("Missing return statement in function");
  }

  final public HCTerm hcConcur() throws ParseException {
        HCInfixOperator io = new HCInfixOperator();
        io.operation = HCInfixOperator.Operation.CONCUR;
        HCTerm t;
    t = hcSequence();
                                io.components.add(t);
    label_6:
    while (true) {
      if (jj_2_12(3)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(CONCUR);
      t = hcSequence();
                                                                                 io.components.add(t);
    }
                if (io.components.size()==1) {if (true) return t;}
                {if (true) return io;}
    throw new Error("Missing return statement in function");
  }

  final public HCTerm hcSequence() throws ParseException {
        HCInfixOperator io = new HCInfixOperator();
        io.operation = HCInfixOperator.Operation.SEQUENCE;
        HCTerm t;
    t = hcFollow();
                              io.components.add(t);
    label_7:
    while (true) {
      if (jj_2_13(3)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(SEQUENCE);
      t = hcFollow();
                                                                               io.components.add(t);
    }
                if (io.components.size()==1) {if (true) return t;}
                {if (true) return io;}
    throw new Error("Missing return statement in function");
  }

  final public HCTerm hcFollow() throws ParseException {
        HCInfixOperator io = new HCInfixOperator();
        io.operation = HCInfixOperator.Operation.FOLLOW;
        HCTerm t;
    t = hcSync();
                            io.components.add(t);
    label_8:
    while (true) {
      if (jj_2_14(3)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(DOT);
      t = hcSync();
                                                                      io.components.add(t);
    }
                if (io.components.size()==1) {if (true) return t;}
                {if (true) return io;}
    throw new Error("Missing return statement in function");
  }

  final public HCTerm hcSync() throws ParseException {
        HCInfixOperator io = new HCInfixOperator();
        io.operation = HCInfixOperator.Operation.SYNC;
        HCTerm t;
    t = hcLoop();
                            io.components.add(t);
    label_9:
    while (true) {
      if (jj_2_15(3)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(COMMA);
      t = hcLoop();
                                                                        io.components.add(t);
    }
                if (io.components.size()==1) {if (true) return t;}
                {if (true) return io;}
    throw new Error("Missing return statement in function");
  }

  final public HCTerm hcLoop() throws ParseException {
        HCLoopTerm lt = new HCLoopTerm();
        HCTerm t;
    if (jj_2_16(3)) {
      jj_consume_token(SHARP);
      t = hcBrackets();
                                        lt.component = t; {if (true) return lt;}
    } else if (jj_2_17(3)) {
      t = hcBrackets();
                                {if (true) return t;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public HCTerm hcBrackets() throws ParseException {
        HCTerm t;
        Token tok;
        HCTerm ret;
        HCPhaseTerm p;
    if (jj_2_18(3)) {
      jj_consume_token(OPEN_B);
      t = hcChoice();
      jj_consume_token(CLOSE_B);
    } else if (jj_2_19(3)) {
      jj_consume_token(UP);
      jj_consume_token(OPEN_B);
      t = hcChoice();
      jj_consume_token(CLOSE_B);
                                                         p = new HCPhaseTerm(); p.phase = ExpansionType.UP;   p.component=t; {if (true) return p;}
    } else if (jj_2_20(3)) {
      jj_consume_token(DOWN);
      jj_consume_token(OPEN_B);
      t = hcChoice();
      jj_consume_token(CLOSE_B);
                                                         p = new HCPhaseTerm(); p.phase = ExpansionType.DOWN; p.component=t; {if (true) return p;}
    } else if (jj_2_21(3)) {
      t = hcChannel();
    } else if (jj_2_22(3)) {
      tok = jj_consume_token(EXPANSION);
      t = hcBrackets();
                                ret = new HCExpansionTerm();
                                ((HCExpansionTerm)ret).operation = HCInfixOperator.Operation.fromString(tok.image.substring(1));
                                ((HCExpansionTerm)ret).component = t;
                                {if (true) return ret;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public HCTerm hcChannel() throws ParseException {
        Token t;
        HCTerm ret;
        HCTerm tmp;
        HCTerm comp;
    if (jj_2_28(3)) {
      t = jj_consume_token(CHANNEL);
                                ret = new HCChannelTerm();
                                ((HCChannelTerm)ret).channel=t.image;
      if (jj_2_23(3)) {
        jj_consume_token(ENCLOSE);
        comp = hcBrackets();
                                tmp = ret;
                                ret = new HCEnclosureTerm();
                                ((HCEnclosureTerm)ret).channel = (HCChannelTerm)tmp;
                                ((HCEnclosureTerm)ret).component = comp;
      } else {
        ;
      }
    } else if (jj_2_29(3)) {
      t = jj_consume_token(REQ);
                                ret = new HCTransitionTerm();
                                ((HCTransitionTerm)ret).channel = ""+t.image.charAt(1);
                                ((HCTransitionTerm)ret).wire = "r";
      if (jj_2_24(3)) {
        t = jj_consume_token(PLUS);
      } else if (jj_2_25(3)) {
        t = jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                ((HCTransitionTerm)ret).direction=t.image;
    } else if (jj_2_30(3)) {
      t = jj_consume_token(ACK);
                                ret = new HCTransitionTerm();
                                ((HCTransitionTerm)ret).channel = ""+t.image.charAt(1);
                                ((HCTransitionTerm)ret).wire = "a";
      if (jj_2_26(3)) {
        t = jj_consume_token(PLUS);
      } else if (jj_2_27(3)) {
        t = jj_consume_token(MINUS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
                                ((HCTransitionTerm)ret).direction=t.image;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_3_30() {
    if (jj_scan_token(ACK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(CHOICE)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(ENCLOSE)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(REQ)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(CHANNEL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(CHANNEL)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(CHANNEL)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(EXPANSION)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(DOWN)) return true;
    if (jj_scan_token(OPEN_B)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(UP)) return true;
    if (jj_scan_token(OPEN_B)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(OPEN_B)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(CLOSE_B)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_10()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(CHANNEL)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(24)) return true;
    if (jj_scan_token(CHANNEL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(23)) return true;
    if (jj_scan_token(CHANNEL)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(SHARP)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(SEQUENCE)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(22)) return true;
    if (jj_scan_token(CHANNEL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(CONCUR)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(21)) return true;
    if (jj_scan_token(CHANNEL)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(20)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_14()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public HCExpressionParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[30];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HCExpressionParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HCExpressionParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HCExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HCExpressionParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HCExpressionParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HCExpressionParser(HCExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HCExpressionParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
