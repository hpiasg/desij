/** * Copyright 2012 Stanislavs Golubcovs * * This file is part of DesiJ. *  * DesiJ is free software: you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation, either version 3 of the License, or * (at your option) any later version. * * DesiJ is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with DesiJ.  If not, see <http://www.gnu.org/licenses/>. */options{	LOOKAHEAD = 1;	CHOICE_AMBIGUITY_CHECK = 2;	OTHER_AMBIGUITY_CHECK = 1;	STATIC = false;	DEBUG_PARSER = false;	DEBUG_LOOKAHEAD = false;	DEBUG_TOKEN_MANAGER = false;	ERROR_REPORTING = true;	JAVA_UNICODE_ESCAPE = false;	UNICODE_INPUT = false;	IGNORE_CASE = false;	USER_TOKEN_MANAGER = false;	USER_CHAR_STREAM = false;	BUILD_PARSER = true;	BUILD_TOKEN_MANAGER = true;	SANITY_CHECK = true;	FORCE_LA_CHECK = true;		JDK_VERSION = "1.5";}PARSER_BEGIN(hcExpressionParser)package net.strongdesign.balsa.hcexpressionparser;

public class hcExpressionParser{  public static void main(String args []) throws ParseException  {  	    hcExpressionParser parser = new hcExpressionParser(System.in);    while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (parser.one_line())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        parser.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(hcExpressionParser)SKIP :{  " "|"\r"|"\n"}TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >}TOKEN : { <#LC_LETTER		: ["a"-"z"] > }TOKEN : { <#LETTER			: ["a"-"z"]|["A"-"Z"] > }TOKEN : { <#DEC_DIGIT		: (["0"-"9"]) > }TOKEN : { <DIGITS			: ["1"-"9"] (<DEC_DIGIT>)* > }TOKEN : { <STRING_LITERAL	: "\"" (~["\n", "\r", "\""])* "\"" > }TOKEN : { <SYMBOL			: < LC_LETTER > (< LC_LETTER >|< DEC_DIGIT >|"-"|"_"|":")* > }int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    | < DIVIDE >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < DIGITS >| "(" sum() ")"}
