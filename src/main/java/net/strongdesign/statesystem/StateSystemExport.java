/**
 * Copyright 2004,2005,2006,2007,2008,2009,2010,2011 Mark Schaefer, Dominic Wist
 *
 * This file is part of DesiJ.
 * 
 * DesiJ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DesiJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DesiJ.  If not, see <http://www.gnu.org/licenses/>.
 */

package net.strongdesign.statesystem;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.Set;

import net.strongdesign.desij.CLW;
import net.strongdesign.statesystem.decorator.StateEnumerator;
import net.strongdesign.util.FileSupport;
import net.strongdesign.util.HelperApplications;

public class StateSystemExport {
	
	public static <State,Event> void convertToPS(StateSystem<State,Event> system) throws IOException, InterruptedException  {
		
		String l = CLW.instance.LABEL.getValue();
		if (l.equals("")) 
			l=CLW.instance.OUTFILE.getValue();
		
		
		FileSupport.saveToDisk(convertToDot(system, l), CLW.instance.OUTFILE.getValue()+".tmp");
		
		HelperApplications.startExternalTool(HelperApplications.DOT, 
				" -Tps " +
				HelperApplications.SECTION_START+CLW.instance.OUTFILE.getValue()+".tmp"+HelperApplications.SECTION_END +
				" -o " +
				HelperApplications.SECTION_START+CLW.instance.OUTFILE.getValue()+HelperApplications.SECTION_END ).waitFor();
	//	Runtime.getRuntime().exec("rm " + DesiJ.clw.OUTFILE.getValue()+".tmp").waitFor();
		File fileToDelete = new File(CLW.instance.OUTFILE.getValue()+".tmp");
		if (fileToDelete.exists() && fileToDelete.isFile()) fileToDelete.delete();
	}
	
	
	protected static <State,Event> String convertToDot(StateSystem<State,Event> system, String l) {
		StringBuilder result = new StringBuilder();
		
		//ehre, wem ehre gebuehrt :-)
		result.append("/*Generated by DesiJ "+new Date() + "*/\n"); 
		
		result.append(
				"\ndigraph {\nsize=\"7,10\"\n"+"" +
				"center=true\n"+"" +
				"labelloc=bottom\n"+
		"concentrate=false\n");
		
		result.append("label=\"" + l+ "\\nGenerated by DesiJ - "+new Date()+"\"\n");
		
		StateEnumerator<State,Event> enumerator = new StateEnumerator<State,Event>(system);
		Integer start = enumerator.getInitialState();
		
		for (Integer state : new StateIteratorFactory<Integer,Event>(enumerator)) {
			if (state.equals(start)) {
				result.append("start [label=\"\" style=invis]\n");
				result.append("start -> \n\""+state+"\"\n");
				result.append("\""+state +"\" [shape=circle,width=0.3, height=0.3, fontname=Arial, fixedsize=true, label=\""+ enumerator.getOriginalState(state) +"\" ]\n");
			}
			else
				result.append("\""+state +"\" [shape=circle, width=0.3, height=0.3, fontname=Arial, fixedsize=true, label=\""+ enumerator.getOriginalState(state) +"\" ]\n");
			
			
			Set<Event> events = enumerator.getEvents(state);
			for (Event event : events) {
				result.append("\""+state +"\" ");
				for (Integer ns : enumerator.getNextStates(state, event)) {
					result.append(" -> \"" + enumerator.getOriginalState(ns) + "\" [fontname=Arial, label=\"  "+event+"\"]\n");
				}
			}
		}
		
		
		result.append("\n }"); 
		
		return result.toString();
	}
}
