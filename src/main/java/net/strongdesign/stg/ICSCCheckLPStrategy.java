/**
 * Copyright 2004,2005,2006,2007,2008,2009,2010,2011 Mark Schaefer, Dominic Wist
 *
 * This file is part of DesiJ.
 * 
 * DesiJ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DesiJ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DesiJ.  If not, see <http://www.gnu.org/licenses/>.
 */


package net.strongdesign.stg;

import java.util.Set;

import lpsolve.LpSolveException;

/**
 * @author dominic.wist
 * 
 * There might be different strategies for checking CSC by using (I)LP
 *
 */
public interface ICSCCheckLPStrategy {
	
	
	/**
	 * Implements the linear programming CSC check according to Josep's Paper:
	 * Synthesis of Asynchronous Controllers Using Integer Linear Programming
	 * @param neededSignals - necessary signals for acting according to the specified I/O interface
	 * @return - true, if a solution was found, otherwise false
	 * @throws LpSolveException - can be thrown, if you work directly with the lpsolve java wrapper
	 */
	public boolean execute(Set<Integer> neededSignals) throws LpSolveException;
	
	
	/**
	 * Find signals s for which Cs v1 != Cs v2
	 * @param neededSignals - necessary signals for acting according to the specified I/O interface 
	 * and for CSC satisfaction 
	 * @return unbalanced signals w.r.t. lastResult (generated by execute(...))
	 */
	public Set<Integer> getUnbalancedSignals(Set<Integer> neededSignals);

}
