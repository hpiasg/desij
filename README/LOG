2006/10/22

14:40
Tested conversion to ps after refactoring
Parser did not work
	In the parser an ? or * was (accidentaly) deleted
	Also, some variable increment was forgotton
	

14:50
Tested cloning
Cloning of the new datastructures (signalNames, signalNumbers) was missing


15:37
Tested rg generation
Found error, signature was not copied

But then rg could not be viewd, error was caused (and still is) by graphviz-2.2.1
dot terminates with a segmentation fault, probably the input is too big
I refactored the 2dot conversion method to use just the number as identifiers in the dot input file, which saves
some memory (possible since they are unique after a previous refactoring) but it did not help
There are newer versions of graphviz available but for ubuntu -> have to work on this

15:57 
tried to compile graphviz 2.8 but it didn't work -- as usual


16:19
Tested basic decomposition
Some problems with the partition checking, because partitions are based on signal names instead of signal numbers


2006/10/24

15:19 
Parallel composition of STGs did not work because of multiple signal numbers in the different STGs denoting different signals.
Added a signal reassignment to achieve a uniform mapping.
Works for simple examples, but some testing is still needed.

17:42
Stopped debugging of parallel composition, there are still problems:
 - hiding not tested
 - it is not enough to check if a signal name is in use, one has to do the check also for the number
 
Added a cache for the intersection to the preset tree algorithm, most accesses are a miss, for the art_jor examples every one is
I think it is better to remove the cache.


2006/10/25

17:00
Resumed debugging of parallel composition
 - there was an error in the reassignment function of STG (here signal names are assigned to a new signal number)
 	if the number already exists, the assignments are swapped. The error was a wrong if statement, which checked if a
 	SignalEDGE is contained a set of signals -> always false 
 	There was no compilation error, since even the generic Set class has a contains(Object o) method.
 	Took me 2.5 hours to find this.


2006/10/26

13:15
"The bug that wasn't there"
	Parallel composition seems to work now. I tested bisim check with an handmade example with internal signals
	and it didn't work. Turned out that the program is correct, but the example not!

14:01
Fixed another error in parallel composition. Seems to be correct now!!
	If a signal name occurs as internal signal in STG A and e.g. as output in STG B, these two signals are identified
	and they will get the same internal signal number. Now every internal signal gets a unque number when the STG is used in
	a parallel composition.

Updated CommandLineWrapper. The regular expression for command line parameters would not accept commas, e.g. hide=a,b
would be considered as input file.


15:12
Added pretty print for preset trees.
For example:

[5]
├─[2, 4, 3]
│ ├─[1]
│ └─[6]
└─[6, 7]
  ├─[8, 9]
  └─[4]
    ├─[8]
    └─[3]


15:24
And even better:
    
[5]
 ├─[2, 4, 3]
 │  ├─[1]
 │  └─[6]
 └─[6, 7]
    ├─[8, 9]
    └─[4]
       ├─[8]
       └─[3]
    
    
17:22
Preset trees again.
Implemented a randomized algorithm for preset tree calculation.
First tests showed that it is better than Victors algorithm. Unfortunately there was a small implementation error.
The random trees are about 40% bigger for STGs.
Implemented an advanced randomised algoritm which results in about 20% bigger STGs.
Both versions are of course much faster. The results may get worse when the STGs get bigger.
I have to test this.


2006/10/28

13:15
Worked for two days on an error. CSC aware deco did not worked, more precise the inverse trace projection
did not work. This is something that is not possible for decomposition. Long story short, a signal set which should be
not change once it is saved was actually backed up from the STG and was therefore updated when the algorithm runs.
Fixed this.

13:45
Did not fix it. But now, hopefully.



2006/10/29

20:32
COntractions were extremely slow. About 2 per second. It turned out that before every contraction redundant places were
deleted, which is very inefficient for large nets. I removed this check. 
I also made the check for shortcut places optional.

But it very neccessary to update the deletion of redundant places:
 - only when needed, i.e. preventing contractions
 - perform it more efficient
 
 
Another issue: contraction of art10 with top-down calculated deco-tree takes 10 sec but with random tree it takes 70 sec 
altough the tree is only 15% bigger. Don't know why. I will implement a statistic feature, i.e. backtracking how often?
contractions how often and so on.

Logging has to be updated: writing to logfile only when also writing to console.


2006/11/06

11:15
Time for a log entry! Worked for the last week on the damn preset tree algorithm, now there is a optimised version which
uses BitSets instead of ordinary sets of Integers. There is a memory saving of factor 32 and also the runtime is increased since
intersections can now be calculated in linear instead of quadratic time.

Problems with tree deco and the art series:
When backtracking2 (sic!) is performed to solve CSC, signals are added essentially randomly. And this seems not to be helpful.
Ok, when the specification has no CSC we might not expect the components to have. Problem is that a lot of signals are added after the 
third backtracking and the inverse projection algorithm is not powerful enough to tackle such a large search space.

Interesting is that most of the components of an art
STG are simple cycles of two signals, only the signals which connects the pipelines make problems.

2006/11/07

21:23
Worked a little bit with the new mpsat version, unfortunately it is not able to solve CSC for the artjor pipeline "connector".

The partition parameter can now handle regular expressions as in the Java regular expressions, furthermore one can write "auto" instead of
signal list and the rest of the signals is partioned automatically or added to given partitions, e.g.
	partition=x.?1:y.?1_auto
would generate a partition containing all signals starting with x or y and ending with 1, all other signals are partioned to as many
partitions as possible, if there is a conflict between signal z and x21, z would be added to the big partition.


Implemented the statistics server with RMI, very uninformative at the moment, but it works without decreasing efficiency of the main part.
This was the problem for implementing this directly with sockets. 



2006/11/14

21:10
Got a new mpsat version with some bugfixes which occured when invoked by DesiJ.
Added checking of red. places and safe contractions with mpsat.
Made CSC deco more simple by outsourcing some methods.

Still need to find a proper example for the new features!




 